#include<bits/stdc++.h>
using namespace std;
class SGT{
    public:
    vector<int>sgt;
    public:
    SGT(int n)
    {
        sgt.resize(4*n+1);
    }
    void build(int idx,int low,int high,vector<int>& arr)
    {
        if(low==high)
        {
            sgt[idx]=arr[low];
            return;
        }
        int mid=(low+high)/2;
        build(2*idx+1,low,mid,arr);
        build(2*idx+2,mid+1,high,arr);
        sgt[idx]=sgt[2*idx+1]+sgt[2*idx+2];
        return;
    }
    int query(int idx,int low,int high,int l,int h)
    {
        if(h<low || high<l)
        return 0;
        
        if(l<=low && high<=h)
        return sgt[idx];

        int mid=(low+high)/2;
        
        int left= query(2*idx+1,low,mid,l,h);
        int right= query(2*idx+2,mid+1,high,l,h);
        return left+right;
    }
    void update(int idx,int low,int high,int i,vector<int>& arr)
    {
        if(low==high)
        {
            sgt[idx]=arr[low];
            return;
        }
        int mid=(low+high)/2;
        if(i<=mid)
        {
            update(2*idx+1,low,mid,i,arr);
        }
        else
        {
            update(2*idx+2,mid+1,high,i,arr);
        }
        sgt[idx]=sgt[2*idx+1]+sgt[2*idx+2];
    }
};
int main()
{
    int n;
    cin>>n;
    vector<int>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    SGT tree(n);
    tree.build(0,0,n-1,arr);
    int Q;
    cin>>Q;
    while(Q--)
    {
        int type;
        cin>>type;
        //query
        if(type==1)
        {
            int low,high;
            cin>>low;
            cin>>high;
            cout<<tree.query(0,0,n-1,low,high)<<endl;
        }
        else if(type==2)
        {
            int ind,val;
            cin>>ind;
            cin>>val;
            arr[ind]=val;
            tree.update(0,0,n-1,ind,arr);
            cout<<"updated"<<endl;
        }
    }
    return 0;
}
